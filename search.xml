<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CSS层叠样式表</title>
      <link href="/2020/04/08/css/"/>
      <url>/2020/04/08/css/</url>
      
        <content type="html"><![CDATA[<h1 id="css基础"><a href="#css基础" class="headerlink" title="css基础"></a>css基础</h1><h2 id="子孙选择器"><a href="#子孙选择器" class="headerlink" title="子孙选择器"></a>子孙选择器</h2><p>父元素和子孙元素之间用空格隔开，子孙选择器会选择所有子孙，包括这个元素中嵌套的所有,不管嵌套多深。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div span&#123; &#x2F;&#x2F; 选择div下面的所有span</span><br><span class="line">    color: red</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div p em&#123; &#x2F;&#x2F; 选择div下面的p下面的所有em</span><br><span class="line">    color: red</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h2><p>以.开头，对元素通过指定class属性，就能选中属于该类的样式，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.red&#123;</span><br><span class="line">    color: red</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p class&#x3D;&quot;red&quot;&gt;这是红色&lt;&#x2F;p&gt;  &#x2F;&#x2F; 这里展示为红色字</span><br></pre></td></tr></table></figure><h2 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h2><p>用id选择一个元素,需要在id前面使用一个#字符,id选择器只与页面中的一个元素匹配，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#footer&#123;</span><br><span class="line">    color: red</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p id&#x3D;&quot;footer&quot;&gt;...&lt;&#x2F;p&gt; &#x2F;&#x2F; 这里展示为红色字</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>样式可以继承，指子元素会继承父元素的部分样式属性，注意这里是部分，并不是所有的样式都会继承。一般规律是：</p><ul><li>如果样式会影响你的文本外观，那么所有这些样式都能继承,如color,font-family,font-size,font-weight,font-style等和字体相关的属性</li><li>其他属性不能继承，如边框，因为如果body元素有边框，不表示你希望body内的所有元素都有边框<h2 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h2><h3 id="link媒体查询"><a href="#link媒体查询" class="headerlink" title="link媒体查询"></a>link媒体查询</h3>你可能需要针对不同的设备使用不同的css文件，可以在html的link标签中增加media属性，配置诸如下面的值：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;lounge-mobile.css&quot; mdeia&#x3D;&quot;screen and (max-device-width: 480px)&quot;&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;lounge-print.css&quot; media&#x3D;&quot;print&quot;&gt;</span><br><span class="line"># 其他属性包括min-device-width,max-device-width,orientation(横向landscape,纵向portrait)</span><br></pre></td></tr></table></figure><h3 id="css媒查询"><a href="#css媒查询" class="headerlink" title="css媒查询"></a>css媒查询</h3>可以直接在css代码中增加媒体查询，使用结构:@media 设备类型 and (设备特性)｛样式代码｝的方式定义媒体查询，例如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@media screen and (min-device-width: 481px)&#123;&#x2F;&#x2F;当设备屏幕宽度大于480px时使用</span><br><span class="line">#guarantee &#123;</span><br><span class="line">  margin-right: 250px;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">@media screen and (max-device-width: 480px)&#123;&#x2F;&#x2F;当设备屏幕小于等于480px时使用</span><br><span class="line"> #guarantee &#123;</span><br><span class="line">   margin-right: 30px;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">@media print &#123; &#x2F;&#x2F; 如果要打印页面，使用该规则</span><br><span class="line">body &#123;</span><br><span class="line">  font-family: Times, &quot;Times New Roman&quot;, serif;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>常用的设备类型（媒体类型）有：</li><li>all (所有的设备)</li><li>screen (电脑显示器)</li><li>print (打印用纸或打印预览图)</li><li>handheld (便携设备)</li><li>tv (电视机类型的设备)<h1 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h1>css把每一个元素看做是一个盒子，每一个盒子由四部分组成，由内向外分别是：内容区（content）、内边距（padding）、边框（board）、外边距（margin），如下图：<br><img src="https://segmentfault.com/img/remote/1460000013069519" alt="盒模型"><br>标准盒模型和IE盒模型在内容的计算方式存在区别。<h2 id="标准模型和IE模型的区别"><a href="#标准模型和IE模型的区别" class="headerlink" title="标准模型和IE模型的区别"></a>标准模型和IE模型的区别</h2></li><li>标准盒模型，width = content</li><li>IE盒模型，width = content+padding+board</li></ul><p>可以通过box-sizing属性对使用哪种盒模型进行切换，</p><ul><li>content-box: 指的是W3C标准盒模型，也是默认的设置属性。</li><li>border-box：指的是IE盒模型，width和height包含了padding和border。<h1 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h1><a href="https://segmentfault.com/a/1190000011358507" target="_blank" rel="noopener">CSS布局说——可能是最全的</a><h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1>前端的动画一般可以分为两种实现：</li><li>JS控制的动画</li><li>css控制的动画<h2 id="JS动画"><a href="#JS动画" class="headerlink" title="JS动画"></a>JS动画</h2>js动画是利用js的能力动态去修改dom元素的位置、大小、透明度等属性，来达到元素动态改变的目的。一般借用两类函数setTimeout setInterval 或requestAnimationFrame来不断绘制动画帧。多数情况下，应首先选用 requestAnimationFrame方法（RAF），因为RAF的原理是会在浏览器下一次重绘之前更新动画，即它的刷新频率和浏览器自身的刷新频率保持一致(一般为60Hz)，从而确保了性能。 如类似如下的代码来实现动画：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;demo&quot; style&#x3D;&quot;position:absolute; width:100px; height:100px; background:#ccc; left:0; top:0;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">var demo &#x3D; document.getElementById(&#39;demo&#39;);</span><br><span class="line">function render()&#123;</span><br><span class="line">    demo.style.left &#x3D; parseInt(demo.style.left) + 1 + &#39;px&#39;; &#x2F;&#x2F;每一帧向右移动1px</span><br><span class="line">&#125;</span><br><span class="line">requestAnimationFrame(function()&#123;</span><br><span class="line">    render();</span><br><span class="line">    &#x2F;&#x2F;当超过300px后才停止</span><br><span class="line">    if(parseInt(demo.style.left) &lt;&#x3D; 300) requestAnimationFrame(arguments.callee);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="css3动画"><a href="#css3动画" class="headerlink" title="css3动画"></a>css3动画</h2>css动画的原理是通过transition属性或@keyframes/animation定义元素在动画中的关键帧，以实现渐变式的过渡。<h3 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h3>CSS 中的 transition 属性允许块级元素中的属性在指定的时间内平滑的改变，简单看下其语法规则：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transition: property duration timing-function delay;</span><br></pre></td></tr></table></figure><h3 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h3>类似的CSS还提供了一个Animation属性，不过区别于Transition，Animation作用于元素本身而不是样式属性，可以使用关键帧的概念，应该说可以实现更自由的动画效果。其语法：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">animation: name duration timing-function delay iteration-count direction;</span><br></pre></td></tr></table></figure><a href="https://juejin.im/entry/5a1c32626fb9a0451b044633" target="_blank" rel="noopener">前端动画大乱炖</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS实现一个栈数据结构</title>
      <link href="/2020/04/07/stack/"/>
      <url>/2020/04/07/stack/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Stack&#123;</span><br><span class="line">    constructor()&#123;</span><br><span class="line">        this.top &#x3D; 0;</span><br><span class="line">        this.store &#x3D; [];</span><br><span class="line">    &#125;</span><br><span class="line">    push(item)&#123;</span><br><span class="line">        this.top++;</span><br><span class="line">        this.store.push(item);</span><br><span class="line">    &#125;</span><br><span class="line">    pop()&#123;</span><br><span class="line">        this.top--;</span><br><span class="line">        return this.store.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    peer()&#123;</span><br><span class="line">        return this.store[this.store.length-1];</span><br><span class="line">    &#125;</span><br><span class="line">    isEmpty()&#123;</span><br><span class="line">        return this.store.length &#x3D;&#x3D;&#x3D; 0; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超文本标记语言Html</title>
      <link href="/2020/04/07/html/"/>
      <url>/2020/04/07/html/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>html称为超文本标记语言，它是一个非常简单的，由标签元素组成的，用以描述web页面的骨架的标记语言。</p><h1 id="标签元素"><a href="#标签元素" class="headerlink" title="标签元素"></a>标签元素</h1><h2 id="元素类型"><a href="#元素类型" class="headerlink" title="元素类型"></a>元素类型</h2><ul><li>块级元素，前后有换行，特点是会占据一整行，如<code>&lt;h1&gt; &lt;p&gt; &lt;div&gt;</code>等。</li><li>行内元素，前后没有换行，特点是随着文档流顺序排列。如<code>&lt;span&gt; &lt;a&gt;</code>等。</li><li>空元素，指自闭合的标签，即元素没有内容，如<code>&lt;br&gt; &lt;hr&gt;</code>等。<h2 id="常用的标签"><a href="#常用的标签" class="headerlink" title="常用的标签"></a>常用的标签</h2><h3 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h3></li><li>常用：div、p、ul、li、ol</li><li>结构：aside、footer、header、nav、section、main</li><li>文章：address、article、figure、figcaption、h1、h2、h3、h4、h5、h6、pre</li><li>表格：table、thead、tbody、tfoot、th、td、caption</li><li>表单：form</li><li>其他：canvas<h3 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h3></li><li>常用：a、img、span</li><li>文本：em、i、strong、small</li><li>表单：button、input、label、option、progress、select、textarea</li><li>媒体：audio、video<h3 id="H5新增元素"><a href="#H5新增元素" class="headerlink" title="H5新增元素"></a>H5新增元素</h3></li><li>section</li><li>article</li><li>audio</li><li>video</li><li>hearder</li><li>footer</li><li>nav</li><li>canvas<h1 id="语义化"><a href="#语义化" class="headerlink" title="语义化"></a>语义化</h1><h2 id="什么是标签语义化"><a href="#什么是标签语义化" class="headerlink" title="什么是标签语义化"></a>什么是标签语义化</h2>标签的语义化是指让标签有自己的含义。如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;这是一个段落&lt;&#x2F;p&gt;</span><br><span class="line">&lt;span&gt;这是一段文字&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure>以上<code>&lt;p&gt;</code>标签的含义代表这是一个段落，<code>&lt;span&gt;</code>标签则没有特别的含义。<h2 id="为什么要标签语义化"><a href="#为什么要标签语义化" class="headerlink" title="为什么要标签语义化"></a>为什么要标签语义化</h2></li><li>代码结构清晰，方便阅读，有利于团队合作开发，易于维护。</li><li>方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）以语义的方式来渲染网页。</li><li>有利于搜索引擎优化（SEO）。<h2 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h2>在一些不强调SEO要求的站点，标签的语义化显得不那么重要。标签语义化的初衷是让正确的标签做正确的事情，标签的语义除了在 tag 上体现，还可以从 id, class 上体现出来。我的理解标签语义化更多的是为 SEO 进行服务，让爬虫更方便地找到想要的信息。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客开通啦</title>
      <link href="/2019/01/01/first-blog/"/>
      <url>/2019/01/01/first-blog/</url>
      
        <content type="html"><![CDATA[<p>欢迎来到<a href="https://qinglance.github.io/">我的博客</a>! 此博客主要用来记录学习笔记和个人心得。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
